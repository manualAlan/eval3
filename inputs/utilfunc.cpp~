#include "utilfunc.hpp"

#include <fstream>
#include <iostream>
#include <sstream>
#include <string>

//parses the ship file and update the route capacities and ship name
void parseShipFile(
    const std::string & filename,
    std::map<std::pair<std::string, std::string>, uint64_t> & routeCapacity,
    std::set<std::string> & shipNames) {
  std::ifstream file(filename);
  if (!file.is_open()) {
    std::cerr << "Cannot open file " << filename << std::endl;
    exit(EXIT_FAILURE);
  }

  std::string line;
  while (std::getline(file, line)) {
    std::istringstream iss(line);
    std::string name;
    std::string typeInfo;
    std::string source;
    std::string destination;
    capacityStr;

    // Parse line fields separated by ':'
    if (!std::getline(iss, name, ':') || !std::getline(iss, typeInfo, ':') ||
        !std::getline(iss, source, ':') || !std::getline(iss, destination, ':') ||
        !std::getline(iss, capacityStr)) {
      std::cerr << "Error: Malformed line in input file: " << line << std::endl;
      exit(EXIT_FAILURE);
    }

    // Check for duplicate ship names
    if (!shipNames.insert(name).second) {
      std::cerr << "Error: Duplicate ship name " << name << std::endl;
      exit(EXIT_FAILURE);
    }

    // Convert capacity to uint64_t
    uint64_t capacity;
    try {
      capacity = std::stoull(capacityStr);
    }
    catch (const std::exception & e) {
      std::cerr << "Error: Invalid capacity value in line: " << line << std::endl;
      exit(EXIT_FAILURE);
    }

    // Create a Ship object (typeInfo included but not used here)
    Ship ship(name, typeInfo, source, destination, capacity);

    // Add capacity to the corresponding route
    routeCapacity[ship.getRoute()] += ship.getCapacity();
  }

  file.close();
}

// Prints the total capacities of all routes.
void printRouteCapacities(
    const std::map<std::pair<std::string, std::string>, uint64_t> & routeCapacity) {
  for (const auto & route : routeCapacity) {
    std::cout << "(" << route.first.first << " -> " << route.first.second
              << ") has total capacity " << route.second << std::endl;
  }
}
