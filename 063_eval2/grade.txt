Grading at 10/24/2024:20:59:04.994474
For commit ID af03534686550d50f07c8faa87ae3569fd95e348
Grading at Thu Oct 24 04:58:44 PM EDT 2024
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4  story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.2: Current test is story-step1 story1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.3: Current test is story-step1 story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.4: Current test is story-step1 story3.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.5: Current test is story-step1 story4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.6: Current test is story-step1 story5.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4  story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.2: Current test is story-step2 words1.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.3: Current test is story-step2 words2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.4: Current test is story-step2 words3.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.5: Current test is story-step2 words4.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.6: Current test is story-step2 words.txt w
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.7: Current test is story-step2 words5.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4  story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.2: Current test is story-step3 words5.txt story5.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.3: Current test is story-step3 words6.txt story6.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.4: Current test is story-step3 words1.txt story3.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.5: Current test is story-step3 words3.txt story4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.6: Current test is story-step3 words6.txt story1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.7: Current test is story-step3 words1.txt story1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.8: Current test is story-step3 words1.txt story3.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.9: Current test is story-step3 words2.txt story3.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.10: Current test is story-step3 words1.txt story2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.11: Current test is story-step3 words6.txt story1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.12: Current test is story-step3 words3.txt story6.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.13: Current test is story-step3 words5.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4  story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 -n words6.txt story6.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2396064== Memcheck, a memory error detector
==2396064== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2396064== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2396064== Command: ./story-step4 -n words6.txt story6.txt
==2396064== Parent PID: 2396063
==2396064== 
==2396064== 
==2396064== HEAP SUMMARY:
==2396064==     in use at exit: 26 bytes in 3 blocks
==2396064==   total heap usage: 41 allocs, 38 frees, 14,004 bytes allocated
==2396064== 
==2396064== 26 bytes in 3 blocks are definitely lost in loss record 1 of 1
==2396064==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2396064==    by 0x490B58E: strdup (strdup.c:42)
==2396064==    by 0x109553: addWordToList (rand_story.c:17)
==2396064==    by 0x109881: parseWords (rand_story.c:75)
==2396064==    by 0x109486: main (story-step4.c:31)
==2396064== 
==2396064== LEAK SUMMARY:
==2396064==    definitely lost: 26 bytes in 3 blocks
==2396064==    indirectly lost: 0 bytes in 0 blocks
==2396064==      possibly lost: 0 bytes in 0 blocks
==2396064==    still reachable: 0 bytes in 0 blocks
==2396064==         suppressed: 0 bytes in 0 blocks
==2396064== 
==2396064== For lists of detected and suppressed errors, rerun with: -s
==2396064== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.2: Current test is story-step4 -n words7.txt story7.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2396098== Memcheck, a memory error detector
==2396098== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2396098== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2396098== Command: ./story-step4 -n words7.txt story7.txt
==2396098== Parent PID: 2396097
==2396098== 
==2396098== 
==2396098== HEAP SUMMARY:
==2396098==     in use at exit: 39 bytes in 6 blocks
==2396098==   total heap usage: 62 allocs, 56 frees, 14,804 bytes allocated
==2396098== 
==2396098== 39 bytes in 6 blocks are definitely lost in loss record 1 of 1
==2396098==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2396098==    by 0x490B58E: strdup (strdup.c:42)
==2396098==    by 0x109553: addWordToList (rand_story.c:17)
==2396098==    by 0x109881: parseWords (rand_story.c:75)
==2396098==    by 0x109486: main (story-step4.c:31)
==2396098== 
==2396098== LEAK SUMMARY:
==2396098==    definitely lost: 39 bytes in 6 blocks
==2396098==    indirectly lost: 0 bytes in 0 blocks
==2396098==      possibly lost: 0 bytes in 0 blocks
==2396098==    still reachable: 0 bytes in 0 blocks
==2396098==         suppressed: 0 bytes in 0 blocks
==2396098== 
==2396098== For lists of detected and suppressed errors, rerun with: -s
==2396098== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.3: Current test is story-step4 -n words8.txt story8.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.4: Current test is story-step4 -n words9.txt story9.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.5: Current test is story-step4 -n words10.txt story10.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2396191== Memcheck, a memory error detector
==2396191== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2396191== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2396191== Command: ./story-step4 -n words10.txt story10.txt
==2396191== Parent PID: 2396190
==2396191== 
==2396191== 
==2396191== HEAP SUMMARY:
==2396191==     in use at exit: 43 bytes in 8 blocks
==2396191==   total heap usage: 52 allocs, 44 frees, 14,271 bytes allocated
==2396191== 
==2396191== 43 bytes in 8 blocks are definitely lost in loss record 1 of 1
==2396191==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2396191==    by 0x490B58E: strdup (strdup.c:42)
==2396191==    by 0x109553: addWordToList (rand_story.c:17)
==2396191==    by 0x109881: parseWords (rand_story.c:75)
==2396191==    by 0x109486: main (story-step4.c:31)
==2396191== 
==2396191== LEAK SUMMARY:
==2396191==    definitely lost: 43 bytes in 8 blocks
==2396191==    indirectly lost: 0 bytes in 0 blocks
==2396191==      possibly lost: 0 bytes in 0 blocks
==2396191==    still reachable: 0 bytes in 0 blocks
==2396191==         suppressed: 0 bytes in 0 blocks
==2396191== 
==2396191== For lists of detected and suppressed errors, rerun with: -s
==2396191== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.6: Current test is story-step4 words6.txt story6.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.7: Current test is story-step4 words7.txt story7.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.8: Current test is story-step4 -n story8.txt words8.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
