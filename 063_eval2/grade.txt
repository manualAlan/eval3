Grading at 10/27/2024:16:32:45.672535
For commit ID 840503c634109cd7b3294828dbce907006f51540
Grading at Sun Oct 27 12:32:29 PM EDT 2024
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4  story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Line_1_did_not_match
Line_2_did_not_match
Your file did not match the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
It looks like you got different output from us on that case.
Here is the diff (yours on left, ours on right):

Once upon a time, there was a _animal_ who lived in a very _a |	Once upon a time, there was a cat who lived in a very cat
_place_. 						      |	cat. 
Your file did not match the expected output


1.2: Current test is story-step1 story1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.3: Current test is story-step1 story2.txt
-----------------------------
You considered this a failure case:
Error: Invalid back-reference '1'
But we did not.

1.4: Current test is story-step1 story3.txt
-----------------------------
It looks like you got different output from us on that case.
Here is the diff (yours on left, ours on right):

___ ___ ____ __						      |	catcatcat catcat cat
Your file did not match the expected output


1.5: Current test is story-step1 story4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.6: Current test is story-step1 story5.txt
-----------------------------
It looks like you got different output from us on that case.
Here is the diff (yours on left, ours on right):

Animal: _animal_, food: _food_				      |	Animal: cat, food: cat

The _animal_ went to the _place_ to eat some _food_.	      |	The cat went to the cat to eat some cat.
The _adjective_ _animal_ was very satisfied.		      |	The cat cat was very satisfied.

Then it traveled to another _place_ and met a _adjective_ _an |	Then it traveled to another cat and met a cat cat.
Your file did not match the expected output


Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4  story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.2: Current test is story-step2 words1.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.3: Current test is story-step2 words2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.4: Current test is story-step2 words3.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.5: Current test is story-step2 words4.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.6: Current test is story-step2 words.txt w
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.7: Current test is story-step2 words5.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4  story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.2: Current test is story-step3 words5.txt story5.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.3: Current test is story-step3 words6.txt story6.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.4: Current test is story-step3 words1.txt story3.txt
-----------------------------
We considered this a failure case.
But you did not (exit status was EXIT_SUCCESS).

3.5: Current test is story-step3 words3.txt story4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.6: Current test is story-step3 words6.txt story1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.7: Current test is story-step3 words1.txt story1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.8: Current test is story-step3 words1.txt story3.txt
-----------------------------
We considered this a failure case.
But you did not (exit status was EXIT_SUCCESS).

3.9: Current test is story-step3 words2.txt story3.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.10: Current test is story-step3 words1.txt story2.txt
-----------------------------
We considered this a failure case.
But you did not (exit status was EXIT_SUCCESS).

3.11: Current test is story-step3 words6.txt story1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.12: Current test is story-step3 words3.txt story6.txt
-----------------------------
We considered this a failure case.
But you did not (exit status was EXIT_SUCCESS).

3.13: Current test is story-step3 words5.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4  story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 -n words6.txt story6.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.2: Current test is story-step4 -n words7.txt story7.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.3: Current test is story-step4 -n words8.txt story8.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.4: Current test is story-step4 -n words9.txt story9.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.5: Current test is story-step4 -n words10.txt story10.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.6: Current test is story-step4 words6.txt story6.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.7: Current test is story-step4 words7.txt story7.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.8: Current test is story-step4 -n story8.txt words8.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
